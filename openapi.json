{
  "openapi": "3.0.1",
  "info": {
    "title": "Library API",
    "version": "v1"
  },
  "paths": {
    "/api/Auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Authenticates a user with email and password.",
        "requestBody": {
          "description": "The login request containing email and password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registers a new user account.",
        "requestBody": {
          "description": "The registration request containing user details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logs out the current user by clearing the authentication cookie.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Auth/me": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Gets the current authenticated user's information.\r\nUsed to verify authentication status via httpOnly cookies.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Books": {
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Gets all books with optional filtering and pagination (returns paginated response with metadata).",
        "parameters": [
          {
            "name": "genres",
            "in": "query",
            "description": "Optional list of genres to filter by.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "rating",
            "in": "query",
            "description": "Optional exact rating to filter by.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Optional search term for title/author.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional field to sort by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Optional sort direction (asc/desc).",
            "schema": {
              "type": "string",
              "default": "asc"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number (default: 1).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size (default: 20, max: 100).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Books"
        ],
        "summary": "Creates a new book.",
        "requestBody": {
          "description": "The book creation request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Books/{id}": {
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Gets a specific book by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The book ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Books"
        ],
        "summary": "Updates an existing book.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The book ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The book update request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBookRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBookRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Books"
        ],
        "summary": "Deletes a book by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The book ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Books/stats": {
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Gets statistics about the book collection.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookStatsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Books/debug/whoami": {
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "TEMP DEBUG: Shows current user from JWT token.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Books/debug/inspect": {
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "TEMP DEBUG: Shows raw database state for debugging.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/BulkImport/books": {
      "post": {
        "tags": [
          "BulkImport"
        ],
        "summary": "Imports books in bulk from a CSV file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The CSV file containing book data.",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkImportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "413": {
            "description": "Content Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/BulkImport/jobs/{jobId}": {
      "get": {
        "tags": [
          "BulkImport"
        ],
        "summary": "Gets the status of a bulk import job.",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The bulk import job identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkImportResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/BulkImport/export/books": {
      "get": {
        "tags": [
          "BulkImport"
        ],
        "summary": "Exports books to CSV format.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuthResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Gets or sets the JWT token for authenticated requests.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Gets or sets the user's email address.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Gets or sets the user's unique identifier.",
            "format": "uuid"
          },
          "expiresAt": {
            "type": "string",
            "description": "Gets or sets the token expiration date.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Response model for authentication operations."
      },
      "Book": {
        "required": [
          "author",
          "publishedDate",
          "title",
          "userId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the unique identifier for the book.",
            "format": "uuid"
          },
          "title": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the title of the book."
          },
          "author": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the author of the book."
          },
          "publishedDate": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the published date of the book as a string.\r\nCan be a year (e.g., \"2020\"), year-month (e.g., \"2020-05\"), or full date (e.g., \"2020-05-15\")."
          },
          "rating": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the user's rating of the book (1-5).",
            "format": "int32"
          },
          "edition": {
            "maxLength": 100,
            "type": "string",
            "description": "Gets or sets the edition information of the book.",
            "nullable": true
          },
          "isbn": {
            "maxLength": 20,
            "type": "string",
            "description": "Gets or sets the ISBN of the book.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Gets or sets the timestamp when the book was created.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Gets or sets the timestamp when the book was last updated.",
            "format": "date-time"
          },
          "userId": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the user who owns this book.",
            "format": "uuid"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "bookGenres": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookGenre"
            },
            "description": "Gets or sets the collection of genres associated with this book.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a book in the library collection."
      },
      "BookGenre": {
        "type": "object",
        "properties": {
          "bookId": {
            "type": "string",
            "description": "Gets or sets the book identifier.",
            "format": "uuid"
          },
          "genreName": {
            "type": "string",
            "description": "Gets or sets the genre name.",
            "nullable": true
          },
          "book": {
            "$ref": "#/components/schemas/Book"
          },
          "genre": {
            "$ref": "#/components/schemas/Genre"
          }
        },
        "additionalProperties": false,
        "description": "Junction table for the many-to-many relationship between books and genres."
      },
      "BookPaginatedResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Book"
            },
            "description": "Gets or sets the items for the current page.",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Gets or sets the current page number (1-based).",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Gets or sets the number of items per page.",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "description": "Gets or sets the total number of items across all pages.",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "description": "Gets the total number of pages.",
            "format": "int32",
            "readOnly": true
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Gets a value indicating whether there is a previous page.",
            "readOnly": true
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Gets a value indicating whether there is a next page.",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a paginated response containing data and pagination metadata."
      },
      "BookStatsResponse": {
        "type": "object",
        "properties": {
          "totalBooks": {
            "type": "integer",
            "description": "Gets or sets the total number of books.",
            "format": "int32"
          },
          "genreDistribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenreCount"
            },
            "description": "Gets or sets the distribution of books by genre.",
            "nullable": true
          },
          "averageRating": {
            "type": "number",
            "description": "Gets or sets the average rating across all books.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Response model for book statistics."
      },
      "BulkImportResponse": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the import job.",
            "format": "uuid"
          },
          "totalRows": {
            "type": "integer",
            "description": "Gets or sets the total number of rows in the import file.",
            "format": "int32"
          },
          "validRows": {
            "type": "integer",
            "description": "Gets or sets the number of valid rows that were successfully imported.",
            "format": "int32"
          },
          "errorRows": {
            "type": "integer",
            "description": "Gets or sets the number of rows that had validation errors.",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "description": "Gets or sets the current status of the import operation.",
            "nullable": true
          },
          "errorSummary": {
            "type": "string",
            "description": "Gets or sets a summary of validation errors, if any occurred.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response model for bulk import operations."
      },
      "CreateBookRequest": {
        "required": [
          "author",
          "genres",
          "publishedDate",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the title of the book."
          },
          "author": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the author of the book."
          },
          "genres": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of genres for the book."
          },
          "publishedDate": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the published date of the book as a string.\r\nCan be a year (e.g., \"2020\"), year-month (e.g., \"2020-05\"), or full date (e.g., \"2020-05-15\")."
          },
          "rating": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the user's rating of the book.",
            "format": "int32"
          },
          "edition": {
            "maxLength": 100,
            "type": "string",
            "description": "Gets or sets the edition of the book.",
            "nullable": true
          },
          "isbn": {
            "maxLength": 20,
            "type": "string",
            "description": "Gets or sets the ISBN of the book.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request model for creating a new book."
      },
      "Genre": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the name of the genre (primary key).",
            "nullable": true
          },
          "isSystemGenre": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this is a system-defined genre."
          },
          "createdAt": {
            "type": "string",
            "description": "Gets or sets the timestamp when the genre was created.",
            "format": "date-time"
          },
          "bookGenres": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookGenre"
            },
            "description": "Gets or sets the collection of books associated with this genre.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a genre that can be associated with books."
      },
      "GenreCount": {
        "type": "object",
        "properties": {
          "genre": {
            "type": "string",
            "description": "Gets or sets the genre name.",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "description": "Gets or sets the count of books in this genre.",
            "format": "int32"
          },
          "averageRating": {
            "type": "number",
            "description": "Gets or sets the average rating for books in this genre.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Represents the count and statistics for a specific genre."
      },
      "LoginRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the user's email address.",
            "format": "email"
          },
          "password": {
            "maxLength": 100,
            "minLength": 6,
            "type": "string",
            "description": "Gets or sets the user's password."
          }
        },
        "additionalProperties": false,
        "description": "Request model for user login."
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "RegisterRequest": {
        "required": [
          "confirmPassword",
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the user's email address.",
            "format": "email"
          },
          "password": {
            "maxLength": 100,
            "minLength": 6,
            "type": "string",
            "description": "Gets or sets the user's password."
          },
          "confirmPassword": {
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the password confirmation."
          }
        },
        "additionalProperties": false,
        "description": "Request model for user registration."
      },
      "UpdateBookRequest": {
        "required": [
          "author",
          "genres",
          "publishedDate",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the title of the book."
          },
          "author": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the author of the book."
          },
          "genres": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of genres for the book."
          },
          "publishedDate": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the published date of the book as a string.\r\nCan be a year (e.g., \"2020\"), year-month (e.g., \"2020-05\"), or full date (e.g., \"2020-05-15\")."
          },
          "rating": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the user's rating of the book.",
            "format": "int32"
          },
          "edition": {
            "maxLength": 100,
            "type": "string",
            "description": "Gets or sets the edition of the book.",
            "nullable": true
          },
          "isbn": {
            "maxLength": 20,
            "type": "string",
            "description": "Gets or sets the ISBN of the book.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request model for updating an existing book."
      },
      "User": {
        "required": [
          "email",
          "passwordHash"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the unique identifier for the user.",
            "format": "uuid"
          },
          "email": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the email address used for login.",
            "format": "email"
          },
          "passwordHash": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the hashed password for the user."
          },
          "createdAt": {
            "type": "string",
            "description": "Gets or sets the timestamp when the user account was created.",
            "format": "date-time"
          },
          "books": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Book"
            },
            "description": "Gets or sets the collection of books owned by this user.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a user account in the library system."
      }
    }
  }
}