/* tslint:disable */
/* eslint-disable */
/**
 * Library API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Response model for authentication operations.
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * Gets or sets the JWT token for authenticated requests.
     * @type {string}
     * @memberof AuthResponse
     */
    'token'?: string | null;
    /**
     * Gets or sets the user\'s email address.
     * @type {string}
     * @memberof AuthResponse
     */
    'email'?: string | null;
    /**
     * Gets or sets the user\'s unique identifier.
     * @type {string}
     * @memberof AuthResponse
     */
    'userId'?: string;
    /**
     * Gets or sets the token expiration date.
     * @type {string}
     * @memberof AuthResponse
     */
    'expiresAt'?: string;
}
/**
 * Represents a book in the library collection.
 * @export
 * @interface Book
 */
export interface Book {
    /**
     * Gets or sets the unique identifier for the book.
     * @type {string}
     * @memberof Book
     */
    'id'?: string;
    /**
     * Gets or sets the title of the book.
     * @type {string}
     * @memberof Book
     */
    'title': string;
    /**
     * Gets or sets the author of the book.
     * @type {string}
     * @memberof Book
     */
    'author': string;
    /**
     * Gets or sets the published date of the book as a string.  Can be a year (e.g., \"2020\"), year-month (e.g., \"2020-05\"), or full date (e.g., \"2020-05-15\").
     * @type {string}
     * @memberof Book
     */
    'publishedDate': string;
    /**
     * Gets or sets the user\'s rating of the book (1-5).
     * @type {number}
     * @memberof Book
     */
    'rating'?: number;
    /**
     * Gets or sets the edition information of the book.
     * @type {string}
     * @memberof Book
     */
    'edition'?: string | null;
    /**
     * Gets or sets the ISBN of the book.
     * @type {string}
     * @memberof Book
     */
    'isbn'?: string | null;
    /**
     * Gets or sets the timestamp when the book was created.
     * @type {string}
     * @memberof Book
     */
    'createdAt'?: string;
    /**
     * Gets or sets the timestamp when the book was last updated.
     * @type {string}
     * @memberof Book
     */
    'updatedAt'?: string;
    /**
     * Gets or sets the unique identifier of the user who owns this book.
     * @type {string}
     * @memberof Book
     */
    'userId': string;
    /**
     * 
     * @type {User}
     * @memberof Book
     */
    'user'?: User;
    /**
     * Gets or sets the collection of genres associated with this book.
     * @type {Array<BookGenre>}
     * @memberof Book
     */
    'bookGenres'?: Array<BookGenre> | null;
}
/**
 * Junction table for the many-to-many relationship between books and genres.
 * @export
 * @interface BookGenre
 */
export interface BookGenre {
    /**
     * Gets or sets the book identifier.
     * @type {string}
     * @memberof BookGenre
     */
    'bookId'?: string;
    /**
     * Gets or sets the genre name.
     * @type {string}
     * @memberof BookGenre
     */
    'genreName'?: string | null;
    /**
     * 
     * @type {Book}
     * @memberof BookGenre
     */
    'book'?: Book;
    /**
     * 
     * @type {Genre}
     * @memberof BookGenre
     */
    'genre'?: Genre;
}
/**
 * Represents a paginated response containing data and pagination metadata.
 * @export
 * @interface BookPaginatedResponse
 */
export interface BookPaginatedResponse {
    /**
     * Gets or sets the items for the current page.
     * @type {Array<Book>}
     * @memberof BookPaginatedResponse
     */
    'items'?: Array<Book> | null;
    /**
     * Gets or sets the current page number (1-based).
     * @type {number}
     * @memberof BookPaginatedResponse
     */
    'page'?: number;
    /**
     * Gets or sets the number of items per page.
     * @type {number}
     * @memberof BookPaginatedResponse
     */
    'pageSize'?: number;
    /**
     * Gets or sets the total number of items across all pages.
     * @type {number}
     * @memberof BookPaginatedResponse
     */
    'totalItems'?: number;
    /**
     * Gets the total number of pages.
     * @type {number}
     * @memberof BookPaginatedResponse
     */
    'totalPages'?: number;
    /**
     * Gets a value indicating whether there is a previous page.
     * @type {boolean}
     * @memberof BookPaginatedResponse
     */
    'hasPreviousPage'?: boolean;
    /**
     * Gets a value indicating whether there is a next page.
     * @type {boolean}
     * @memberof BookPaginatedResponse
     */
    'hasNextPage'?: boolean;
}
/**
 * Response model for book statistics.
 * @export
 * @interface BookStatsResponse
 */
export interface BookStatsResponse {
    /**
     * Gets or sets the total number of books.
     * @type {number}
     * @memberof BookStatsResponse
     */
    'totalBooks'?: number;
    /**
     * Gets or sets the distribution of books by genre.
     * @type {Array<GenreCount>}
     * @memberof BookStatsResponse
     */
    'genreDistribution'?: Array<GenreCount> | null;
    /**
     * Gets or sets the average rating across all books.
     * @type {number}
     * @memberof BookStatsResponse
     */
    'averageRating'?: number;
}
/**
 * Response model for bulk import operations.
 * @export
 * @interface BulkImportResponse
 */
export interface BulkImportResponse {
    /**
     * Gets or sets the unique identifier of the import job.
     * @type {string}
     * @memberof BulkImportResponse
     */
    'jobId'?: string;
    /**
     * Gets or sets the total number of rows in the import file.
     * @type {number}
     * @memberof BulkImportResponse
     */
    'totalRows'?: number;
    /**
     * Gets or sets the number of valid rows that were successfully imported.
     * @type {number}
     * @memberof BulkImportResponse
     */
    'validRows'?: number;
    /**
     * Gets or sets the number of rows that had validation errors.
     * @type {number}
     * @memberof BulkImportResponse
     */
    'errorRows'?: number;
    /**
     * Gets or sets the current status of the import operation.
     * @type {string}
     * @memberof BulkImportResponse
     */
    'status'?: string | null;
    /**
     * Gets or sets a summary of validation errors, if any occurred.
     * @type {string}
     * @memberof BulkImportResponse
     */
    'errorSummary'?: string | null;
}
/**
 * Request model for creating a new book.
 * @export
 * @interface CreateBookRequest
 */
export interface CreateBookRequest {
    /**
     * Gets or sets the title of the book.
     * @type {string}
     * @memberof CreateBookRequest
     */
    'title': string;
    /**
     * Gets or sets the author of the book.
     * @type {string}
     * @memberof CreateBookRequest
     */
    'author': string;
    /**
     * Gets or sets the list of genres for the book.
     * @type {Array<string>}
     * @memberof CreateBookRequest
     */
    'genres': Array<string>;
    /**
     * Gets or sets the published date of the book as a string.  Can be a year (e.g., \"2020\"), year-month (e.g., \"2020-05\"), or full date (e.g., \"2020-05-15\").
     * @type {string}
     * @memberof CreateBookRequest
     */
    'publishedDate': string;
    /**
     * Gets or sets the user\'s rating of the book.
     * @type {number}
     * @memberof CreateBookRequest
     */
    'rating'?: number;
    /**
     * Gets or sets the edition of the book.
     * @type {string}
     * @memberof CreateBookRequest
     */
    'edition'?: string | null;
    /**
     * Gets or sets the ISBN of the book.
     * @type {string}
     * @memberof CreateBookRequest
     */
    'isbn'?: string | null;
}
/**
 * Represents a genre that can be associated with books.
 * @export
 * @interface Genre
 */
export interface Genre {
    /**
     * Gets or sets the name of the genre (primary key).
     * @type {string}
     * @memberof Genre
     */
    'name'?: string | null;
    /**
     * Gets or sets a value indicating whether this is a system-defined genre.
     * @type {boolean}
     * @memberof Genre
     */
    'isSystemGenre'?: boolean;
    /**
     * Gets or sets the timestamp when the genre was created.
     * @type {string}
     * @memberof Genre
     */
    'createdAt'?: string;
    /**
     * Gets or sets the collection of books associated with this genre.
     * @type {Array<BookGenre>}
     * @memberof Genre
     */
    'bookGenres'?: Array<BookGenre> | null;
}
/**
 * Represents the count and statistics for a specific genre.
 * @export
 * @interface GenreCount
 */
export interface GenreCount {
    /**
     * Gets or sets the genre name.
     * @type {string}
     * @memberof GenreCount
     */
    'genre'?: string | null;
    /**
     * Gets or sets the count of books in this genre.
     * @type {number}
     * @memberof GenreCount
     */
    'count'?: number;
    /**
     * Gets or sets the average rating for books in this genre.
     * @type {number}
     * @memberof GenreCount
     */
    'averageRating'?: number;
}
/**
 * Request model for user login.
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * Gets or sets the user\'s email address.
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string;
    /**
     * Gets or sets the user\'s password.
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * Request model for user registration.
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * Gets or sets the user\'s email address.
     * @type {string}
     * @memberof RegisterRequest
     */
    'email': string;
    /**
     * Gets or sets the user\'s password.
     * @type {string}
     * @memberof RegisterRequest
     */
    'password': string;
    /**
     * Gets or sets the password confirmation.
     * @type {string}
     * @memberof RegisterRequest
     */
    'confirmPassword': string;
}
/**
 * Request model for updating an existing book.
 * @export
 * @interface UpdateBookRequest
 */
export interface UpdateBookRequest {
    /**
     * Gets or sets the title of the book.
     * @type {string}
     * @memberof UpdateBookRequest
     */
    'title': string;
    /**
     * Gets or sets the author of the book.
     * @type {string}
     * @memberof UpdateBookRequest
     */
    'author': string;
    /**
     * Gets or sets the list of genres for the book.
     * @type {Array<string>}
     * @memberof UpdateBookRequest
     */
    'genres': Array<string>;
    /**
     * Gets or sets the published date of the book as a string.  Can be a year (e.g., \"2020\"), year-month (e.g., \"2020-05\"), or full date (e.g., \"2020-05-15\").
     * @type {string}
     * @memberof UpdateBookRequest
     */
    'publishedDate': string;
    /**
     * Gets or sets the user\'s rating of the book.
     * @type {number}
     * @memberof UpdateBookRequest
     */
    'rating'?: number;
    /**
     * Gets or sets the edition of the book.
     * @type {string}
     * @memberof UpdateBookRequest
     */
    'edition'?: string | null;
    /**
     * Gets or sets the ISBN of the book.
     * @type {string}
     * @memberof UpdateBookRequest
     */
    'isbn'?: string | null;
}
/**
 * Represents a user account in the library system.
 * @export
 * @interface User
 */
export interface User {
    /**
     * Gets or sets the unique identifier for the user.
     * @type {string}
     * @memberof User
     */
    'id'?: string;
    /**
     * Gets or sets the email address used for login.
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * Gets or sets the hashed password for the user.
     * @type {string}
     * @memberof User
     */
    'passwordHash': string;
    /**
     * Gets or sets the timestamp when the user account was created.
     * @type {string}
     * @memberof User
     */
    'createdAt'?: string;
    /**
     * Gets or sets the collection of books owned by this user.
     * @type {Array<Book>}
     * @memberof User
     */
    'books'?: Array<Book> | null;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authenticates a user with email and password.
         * @param {LoginRequest} [loginRequest] The login request containing email and password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: async (loginRequest?: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logs out the current user by clearing the authentication cookie.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the current authenticated user\'s information.  Used to verify authentication status via httpOnly cookies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Registers a new user account.
         * @param {RegisterRequest} [registerRequest] The registration request containing user details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost: async (registerRequest?: RegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Authenticates a user with email and password.
         * @param {LoginRequest} [loginRequest] The login request containing email and password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginPost(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginPost(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Logs out the current user by clearing the authentication cookie.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gets the current authenticated user\'s information.  Used to verify authentication status via httpOnly cookies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Registers a new user account.
         * @param {RegisterRequest} [registerRequest] The registration request containing user details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRegisterPost(registerRequest?: RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRegisterPost(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Authenticates a user with email and password.
         * @param {LoginRequest} [loginRequest] The login request containing email and password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.apiAuthLoginPost(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logs out the current user by clearing the authentication cookie.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the current authenticated user\'s information.  Used to verify authentication status via httpOnly cookies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthMeGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiAuthMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Registers a new user account.
         * @param {RegisterRequest} [registerRequest] The registration request containing user details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(registerRequest?: RegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.apiAuthRegisterPost(registerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - interface
 * @export
 * @interface AuthApi
 */
export interface AuthApiInterface {
    /**
     * 
     * @summary Authenticates a user with email and password.
     * @param {LoginRequest} [loginRequest] The login request containing email and password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    apiAuthLoginPost(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse>;

    /**
     * 
     * @summary Logs out the current user by clearing the authentication cookie.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    apiAuthLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Gets the current authenticated user\'s information.  Used to verify authentication status via httpOnly cookies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    apiAuthMeGet(options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Registers a new user account.
     * @param {RegisterRequest} [registerRequest] The registration request containing user details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    apiAuthRegisterPost(registerRequest?: RegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse>;

}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI implements AuthApiInterface {
    /**
     * 
     * @summary Authenticates a user with email and password.
     * @param {LoginRequest} [loginRequest] The login request containing email and password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLoginPost(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLoginPost(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logs out the current user by clearing the authentication cookie.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLogoutPost(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the current authenticated user\'s information.  Used to verify authentication status via httpOnly cookies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthMeGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Registers a new user account.
     * @param {RegisterRequest} [registerRequest] The registration request containing user details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthRegisterPost(registerRequest?: RegisterRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthRegisterPost(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BooksApi - axios parameter creator
 * @export
 */
export const BooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary TEMP DEBUG: Shows raw database state for debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksDebugInspectGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Books/debug/inspect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary TEMP DEBUG: Shows current user from JWT token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksDebugWhoamiGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Books/debug/whoami`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets all books with optional filtering and pagination (returns paginated response with metadata).
         * @param {Array<string>} [genres] Optional list of genres to filter by.
         * @param {number} [rating] Optional exact rating to filter by.
         * @param {string} [search] Optional search term for title/author.
         * @param {string} [sortBy] Optional field to sort by.
         * @param {string} [sortDirection] Optional sort direction (asc/desc).
         * @param {number} [page] Page number (default: 1).
         * @param {number} [pageSize] Page size (default: 20, max: 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksGet: async (genres?: Array<string>, rating?: number, search?: string, sortBy?: string, sortDirection?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (genres) {
                localVarQueryParameter['genres'] = genres;
            }

            if (rating !== undefined) {
                localVarQueryParameter['rating'] = rating;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a book by its ID.
         * @param {string} id The book ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBooksIdDelete', 'id', id)
            const localVarPath = `/api/Books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a specific book by its ID.
         * @param {string} id The book ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBooksIdGet', 'id', id)
            const localVarPath = `/api/Books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing book.
         * @param {string} id The book ID.
         * @param {UpdateBookRequest} [updateBookRequest] The book update request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksIdPut: async (id: string, updateBookRequest?: UpdateBookRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBooksIdPut', 'id', id)
            const localVarPath = `/api/Books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new book.
         * @param {CreateBookRequest} [createBookRequest] The book creation request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksPost: async (createBookRequest?: CreateBookRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets statistics about the book collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksStatsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Books/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BooksApi - functional programming interface
 * @export
 */
export const BooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BooksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary TEMP DEBUG: Shows raw database state for debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBooksDebugInspectGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBooksDebugInspectGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.apiBooksDebugInspectGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary TEMP DEBUG: Shows current user from JWT token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBooksDebugWhoamiGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBooksDebugWhoamiGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.apiBooksDebugWhoamiGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gets all books with optional filtering and pagination (returns paginated response with metadata).
         * @param {Array<string>} [genres] Optional list of genres to filter by.
         * @param {number} [rating] Optional exact rating to filter by.
         * @param {string} [search] Optional search term for title/author.
         * @param {string} [sortBy] Optional field to sort by.
         * @param {string} [sortDirection] Optional sort direction (asc/desc).
         * @param {number} [page] Page number (default: 1).
         * @param {number} [pageSize] Page size (default: 20, max: 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBooksGet(genres?: Array<string>, rating?: number, search?: string, sortBy?: string, sortDirection?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookPaginatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBooksGet(genres, rating, search, sortBy, sortDirection, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.apiBooksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes a book by its ID.
         * @param {string} id The book ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBooksIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBooksIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.apiBooksIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gets a specific book by its ID.
         * @param {string} id The book ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBooksIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Book>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBooksIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.apiBooksIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an existing book.
         * @param {string} id The book ID.
         * @param {UpdateBookRequest} [updateBookRequest] The book update request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBooksIdPut(id: string, updateBookRequest?: UpdateBookRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Book>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBooksIdPut(id, updateBookRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.apiBooksIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates a new book.
         * @param {CreateBookRequest} [createBookRequest] The book creation request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBooksPost(createBookRequest?: CreateBookRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Book>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBooksPost(createBookRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.apiBooksPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gets statistics about the book collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBooksStatsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBooksStatsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.apiBooksStatsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BooksApi - factory interface
 * @export
 */
export const BooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BooksApiFp(configuration)
    return {
        /**
         * 
         * @summary TEMP DEBUG: Shows raw database state for debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksDebugInspectGet(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiBooksDebugInspectGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary TEMP DEBUG: Shows current user from JWT token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksDebugWhoamiGet(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiBooksDebugWhoamiGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets all books with optional filtering and pagination (returns paginated response with metadata).
         * @param {Array<string>} [genres] Optional list of genres to filter by.
         * @param {number} [rating] Optional exact rating to filter by.
         * @param {string} [search] Optional search term for title/author.
         * @param {string} [sortBy] Optional field to sort by.
         * @param {string} [sortDirection] Optional sort direction (asc/desc).
         * @param {number} [page] Page number (default: 1).
         * @param {number} [pageSize] Page size (default: 20, max: 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksGet(genres?: Array<string>, rating?: number, search?: string, sortBy?: string, sortDirection?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<BookPaginatedResponse> {
            return localVarFp.apiBooksGet(genres, rating, search, sortBy, sortDirection, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a book by its ID.
         * @param {string} id The book ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBooksIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a specific book by its ID.
         * @param {string} id The book ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Book> {
            return localVarFp.apiBooksIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing book.
         * @param {string} id The book ID.
         * @param {UpdateBookRequest} [updateBookRequest] The book update request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksIdPut(id: string, updateBookRequest?: UpdateBookRequest, options?: RawAxiosRequestConfig): AxiosPromise<Book> {
            return localVarFp.apiBooksIdPut(id, updateBookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new book.
         * @param {CreateBookRequest} [createBookRequest] The book creation request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksPost(createBookRequest?: CreateBookRequest, options?: RawAxiosRequestConfig): AxiosPromise<Book> {
            return localVarFp.apiBooksPost(createBookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets statistics about the book collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksStatsGet(options?: RawAxiosRequestConfig): AxiosPromise<BookStatsResponse> {
            return localVarFp.apiBooksStatsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BooksApi - interface
 * @export
 * @interface BooksApi
 */
export interface BooksApiInterface {
    /**
     * 
     * @summary TEMP DEBUG: Shows raw database state for debugging.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApiInterface
     */
    apiBooksDebugInspectGet(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @summary TEMP DEBUG: Shows current user from JWT token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApiInterface
     */
    apiBooksDebugWhoamiGet(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @summary Gets all books with optional filtering and pagination (returns paginated response with metadata).
     * @param {Array<string>} [genres] Optional list of genres to filter by.
     * @param {number} [rating] Optional exact rating to filter by.
     * @param {string} [search] Optional search term for title/author.
     * @param {string} [sortBy] Optional field to sort by.
     * @param {string} [sortDirection] Optional sort direction (asc/desc).
     * @param {number} [page] Page number (default: 1).
     * @param {number} [pageSize] Page size (default: 20, max: 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApiInterface
     */
    apiBooksGet(genres?: Array<string>, rating?: number, search?: string, sortBy?: string, sortDirection?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<BookPaginatedResponse>;

    /**
     * 
     * @summary Deletes a book by its ID.
     * @param {string} id The book ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApiInterface
     */
    apiBooksIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Gets a specific book by its ID.
     * @param {string} id The book ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApiInterface
     */
    apiBooksIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Book>;

    /**
     * 
     * @summary Updates an existing book.
     * @param {string} id The book ID.
     * @param {UpdateBookRequest} [updateBookRequest] The book update request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApiInterface
     */
    apiBooksIdPut(id: string, updateBookRequest?: UpdateBookRequest, options?: RawAxiosRequestConfig): AxiosPromise<Book>;

    /**
     * 
     * @summary Creates a new book.
     * @param {CreateBookRequest} [createBookRequest] The book creation request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApiInterface
     */
    apiBooksPost(createBookRequest?: CreateBookRequest, options?: RawAxiosRequestConfig): AxiosPromise<Book>;

    /**
     * 
     * @summary Gets statistics about the book collection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApiInterface
     */
    apiBooksStatsGet(options?: RawAxiosRequestConfig): AxiosPromise<BookStatsResponse>;

}

/**
 * BooksApi - object-oriented interface
 * @export
 * @class BooksApi
 * @extends {BaseAPI}
 */
export class BooksApi extends BaseAPI implements BooksApiInterface {
    /**
     * 
     * @summary TEMP DEBUG: Shows raw database state for debugging.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public apiBooksDebugInspectGet(options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).apiBooksDebugInspectGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary TEMP DEBUG: Shows current user from JWT token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public apiBooksDebugWhoamiGet(options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).apiBooksDebugWhoamiGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets all books with optional filtering and pagination (returns paginated response with metadata).
     * @param {Array<string>} [genres] Optional list of genres to filter by.
     * @param {number} [rating] Optional exact rating to filter by.
     * @param {string} [search] Optional search term for title/author.
     * @param {string} [sortBy] Optional field to sort by.
     * @param {string} [sortDirection] Optional sort direction (asc/desc).
     * @param {number} [page] Page number (default: 1).
     * @param {number} [pageSize] Page size (default: 20, max: 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public apiBooksGet(genres?: Array<string>, rating?: number, search?: string, sortBy?: string, sortDirection?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).apiBooksGet(genres, rating, search, sortBy, sortDirection, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a book by its ID.
     * @param {string} id The book ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public apiBooksIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).apiBooksIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a specific book by its ID.
     * @param {string} id The book ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public apiBooksIdGet(id: string, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).apiBooksIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an existing book.
     * @param {string} id The book ID.
     * @param {UpdateBookRequest} [updateBookRequest] The book update request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public apiBooksIdPut(id: string, updateBookRequest?: UpdateBookRequest, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).apiBooksIdPut(id, updateBookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new book.
     * @param {CreateBookRequest} [createBookRequest] The book creation request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public apiBooksPost(createBookRequest?: CreateBookRequest, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).apiBooksPost(createBookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets statistics about the book collection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public apiBooksStatsGet(options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).apiBooksStatsGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BulkImportApi - axios parameter creator
 * @export
 */
export const BulkImportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Imports books in bulk from a CSV file.
         * @param {File} [file] The CSV file containing book data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBulkImportBooksPost: async (file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BulkImport/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Exports books to CSV format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBulkImportExportBooksGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/BulkImport/export/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the status of a bulk import job.
         * @param {string} jobId The bulk import job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBulkImportJobsJobIdGet: async (jobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('apiBulkImportJobsJobIdGet', 'jobId', jobId)
            const localVarPath = `/api/BulkImport/jobs/{jobId}`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BulkImportApi - functional programming interface
 * @export
 */
export const BulkImportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BulkImportApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Imports books in bulk from a CSV file.
         * @param {File} [file] The CSV file containing book data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBulkImportBooksPost(file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkImportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBulkImportBooksPost(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BulkImportApi.apiBulkImportBooksPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Exports books to CSV format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBulkImportExportBooksGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBulkImportExportBooksGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BulkImportApi.apiBulkImportExportBooksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gets the status of a bulk import job.
         * @param {string} jobId The bulk import job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBulkImportJobsJobIdGet(jobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkImportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBulkImportJobsJobIdGet(jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BulkImportApi.apiBulkImportJobsJobIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BulkImportApi - factory interface
 * @export
 */
export const BulkImportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BulkImportApiFp(configuration)
    return {
        /**
         * 
         * @summary Imports books in bulk from a CSV file.
         * @param {File} [file] The CSV file containing book data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBulkImportBooksPost(file?: File, options?: RawAxiosRequestConfig): AxiosPromise<BulkImportResponse> {
            return localVarFp.apiBulkImportBooksPost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Exports books to CSV format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBulkImportExportBooksGet(options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.apiBulkImportExportBooksGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the status of a bulk import job.
         * @param {string} jobId The bulk import job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBulkImportJobsJobIdGet(jobId: string, options?: RawAxiosRequestConfig): AxiosPromise<BulkImportResponse> {
            return localVarFp.apiBulkImportJobsJobIdGet(jobId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BulkImportApi - interface
 * @export
 * @interface BulkImportApi
 */
export interface BulkImportApiInterface {
    /**
     * 
     * @summary Imports books in bulk from a CSV file.
     * @param {File} [file] The CSV file containing book data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkImportApiInterface
     */
    apiBulkImportBooksPost(file?: File, options?: RawAxiosRequestConfig): AxiosPromise<BulkImportResponse>;

    /**
     * 
     * @summary Exports books to CSV format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkImportApiInterface
     */
    apiBulkImportExportBooksGet(options?: RawAxiosRequestConfig): AxiosPromise<File>;

    /**
     * 
     * @summary Gets the status of a bulk import job.
     * @param {string} jobId The bulk import job identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkImportApiInterface
     */
    apiBulkImportJobsJobIdGet(jobId: string, options?: RawAxiosRequestConfig): AxiosPromise<BulkImportResponse>;

}

/**
 * BulkImportApi - object-oriented interface
 * @export
 * @class BulkImportApi
 * @extends {BaseAPI}
 */
export class BulkImportApi extends BaseAPI implements BulkImportApiInterface {
    /**
     * 
     * @summary Imports books in bulk from a CSV file.
     * @param {File} [file] The CSV file containing book data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkImportApi
     */
    public apiBulkImportBooksPost(file?: File, options?: RawAxiosRequestConfig) {
        return BulkImportApiFp(this.configuration).apiBulkImportBooksPost(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Exports books to CSV format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkImportApi
     */
    public apiBulkImportExportBooksGet(options?: RawAxiosRequestConfig) {
        return BulkImportApiFp(this.configuration).apiBulkImportExportBooksGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the status of a bulk import job.
     * @param {string} jobId The bulk import job identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkImportApi
     */
    public apiBulkImportJobsJobIdGet(jobId: string, options?: RawAxiosRequestConfig) {
        return BulkImportApiFp(this.configuration).apiBulkImportJobsJobIdGet(jobId, options).then((request) => request(this.axios, this.basePath));
    }
}



